/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.unitycatalog.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.unitycatalog.client.model.ColumnTypeName;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ColumnInfo
 */
@JsonPropertyOrder({
  ColumnInfo.JSON_PROPERTY_NAME,
  ColumnInfo.JSON_PROPERTY_TYPE_TEXT,
  ColumnInfo.JSON_PROPERTY_TYPE_JSON,
  ColumnInfo.JSON_PROPERTY_TYPE_NAME,
  ColumnInfo.JSON_PROPERTY_TYPE_PRECISION,
  ColumnInfo.JSON_PROPERTY_TYPE_SCALE,
  ColumnInfo.JSON_PROPERTY_TYPE_INTERVAL_TYPE,
  ColumnInfo.JSON_PROPERTY_POSITION,
  ColumnInfo.JSON_PROPERTY_COMMENT,
  ColumnInfo.JSON_PROPERTY_NULLABLE,
  ColumnInfo.JSON_PROPERTY_PARTITION_INDEX
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class ColumnInfo {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TYPE_TEXT = "type_text";
  private String typeText;

  public static final String JSON_PROPERTY_TYPE_JSON = "type_json";
  private String typeJson;

  public static final String JSON_PROPERTY_TYPE_NAME = "type_name";
  private ColumnTypeName typeName;

  public static final String JSON_PROPERTY_TYPE_PRECISION = "type_precision";
  private Integer typePrecision;

  public static final String JSON_PROPERTY_TYPE_SCALE = "type_scale";
  private Integer typeScale;

  public static final String JSON_PROPERTY_TYPE_INTERVAL_TYPE = "type_interval_type";
  private String typeIntervalType;

  public static final String JSON_PROPERTY_POSITION = "position";
  private Integer position;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private String comment;

  public static final String JSON_PROPERTY_NULLABLE = "nullable";
  private Boolean nullable = true;

  public static final String JSON_PROPERTY_PARTITION_INDEX = "partition_index";
  private Integer partitionIndex;

  public ColumnInfo() { 
  }

  public ColumnInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of Column.
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ColumnInfo typeText(String typeText) {
    this.typeText = typeText;
    return this;
  }

   /**
   * Full data type specification as SQL/catalogString text.
   * @return typeText
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeText() {
    return typeText;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeText(String typeText) {
    this.typeText = typeText;
  }


  public ColumnInfo typeJson(String typeJson) {
    this.typeJson = typeJson;
    return this;
  }

   /**
   * Full data type specification, JSON-serialized.
   * @return typeJson
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_JSON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeJson() {
    return typeJson;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_JSON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeJson(String typeJson) {
    this.typeJson = typeJson;
  }


  public ColumnInfo typeName(ColumnTypeName typeName) {
    this.typeName = typeName;
    return this;
  }

   /**
   * Get typeName
   * @return typeName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColumnTypeName getTypeName() {
    return typeName;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeName(ColumnTypeName typeName) {
    this.typeName = typeName;
  }


  public ColumnInfo typePrecision(Integer typePrecision) {
    this.typePrecision = typePrecision;
    return this;
  }

   /**
   * Digits of precision; required for DecimalTypes.
   * @return typePrecision
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_PRECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTypePrecision() {
    return typePrecision;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_PRECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypePrecision(Integer typePrecision) {
    this.typePrecision = typePrecision;
  }


  public ColumnInfo typeScale(Integer typeScale) {
    this.typeScale = typeScale;
    return this;
  }

   /**
   * Digits to right of decimal; Required for DecimalTypes.
   * @return typeScale
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTypeScale() {
    return typeScale;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeScale(Integer typeScale) {
    this.typeScale = typeScale;
  }


  public ColumnInfo typeIntervalType(String typeIntervalType) {
    this.typeIntervalType = typeIntervalType;
    return this;
  }

   /**
   * Format of IntervalType.
   * @return typeIntervalType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_INTERVAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeIntervalType() {
    return typeIntervalType;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_INTERVAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeIntervalType(String typeIntervalType) {
    this.typeIntervalType = typeIntervalType;
  }


  public ColumnInfo position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Ordinal position of column (starting at position 0).
   * @return position
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPosition() {
    return position;
  }


  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosition(Integer position) {
    this.position = position;
  }


  public ColumnInfo comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * User-provided free-form text description.
   * @return comment
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }


  public ColumnInfo nullable(Boolean nullable) {
    this.nullable = nullable;
    return this;
  }

   /**
   * Whether field may be Null.
   * @return nullable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NULLABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNullable() {
    return nullable;
  }


  @JsonProperty(JSON_PROPERTY_NULLABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNullable(Boolean nullable) {
    this.nullable = nullable;
  }


  public ColumnInfo partitionIndex(Integer partitionIndex) {
    this.partitionIndex = partitionIndex;
    return this;
  }

   /**
   * Partition index for column.
   * @return partitionIndex
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARTITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPartitionIndex() {
    return partitionIndex;
  }


  @JsonProperty(JSON_PROPERTY_PARTITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPartitionIndex(Integer partitionIndex) {
    this.partitionIndex = partitionIndex;
  }


  /**
   * Return true if this ColumnInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnInfo columnInfo = (ColumnInfo) o;
    return Objects.equals(this.name, columnInfo.name) &&
        Objects.equals(this.typeText, columnInfo.typeText) &&
        Objects.equals(this.typeJson, columnInfo.typeJson) &&
        Objects.equals(this.typeName, columnInfo.typeName) &&
        Objects.equals(this.typePrecision, columnInfo.typePrecision) &&
        Objects.equals(this.typeScale, columnInfo.typeScale) &&
        Objects.equals(this.typeIntervalType, columnInfo.typeIntervalType) &&
        Objects.equals(this.position, columnInfo.position) &&
        Objects.equals(this.comment, columnInfo.comment) &&
        Objects.equals(this.nullable, columnInfo.nullable) &&
        Objects.equals(this.partitionIndex, columnInfo.partitionIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, typeText, typeJson, typeName, typePrecision, typeScale, typeIntervalType, position, comment, nullable, partitionIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typeText: ").append(toIndentedString(typeText)).append("\n");
    sb.append("    typeJson: ").append(toIndentedString(typeJson)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    typePrecision: ").append(toIndentedString(typePrecision)).append("\n");
    sb.append("    typeScale: ").append(toIndentedString(typeScale)).append("\n");
    sb.append("    typeIntervalType: ").append(toIndentedString(typeIntervalType)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    nullable: ").append(toIndentedString(nullable)).append("\n");
    sb.append("    partitionIndex: ").append(toIndentedString(partitionIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type_text` to the URL query string
    if (getTypeText() != null) {
      joiner.add(String.format("%stype_text%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTypeText()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type_json` to the URL query string
    if (getTypeJson() != null) {
      joiner.add(String.format("%stype_json%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTypeJson()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type_name` to the URL query string
    if (getTypeName() != null) {
      joiner.add(String.format("%stype_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTypeName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type_precision` to the URL query string
    if (getTypePrecision() != null) {
      joiner.add(String.format("%stype_precision%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTypePrecision()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type_scale` to the URL query string
    if (getTypeScale() != null) {
      joiner.add(String.format("%stype_scale%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTypeScale()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type_interval_type` to the URL query string
    if (getTypeIntervalType() != null) {
      joiner.add(String.format("%stype_interval_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTypeIntervalType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `position` to the URL query string
    if (getPosition() != null) {
      joiner.add(String.format("%sposition%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPosition()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `comment` to the URL query string
    if (getComment() != null) {
      joiner.add(String.format("%scomment%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getComment()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `nullable` to the URL query string
    if (getNullable() != null) {
      joiner.add(String.format("%snullable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNullable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `partition_index` to the URL query string
    if (getPartitionIndex() != null) {
      joiner.add(String.format("%spartition_index%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPartitionIndex()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

