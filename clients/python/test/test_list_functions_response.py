# coding: utf-8

"""
    Unity Catalog API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from unitycatalog.models.list_functions_response import ListFunctionsResponse

class TestListFunctionsResponse(unittest.TestCase):
    """ListFunctionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListFunctionsResponse:
        """Test ListFunctionsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListFunctionsResponse`
        """
        model = ListFunctionsResponse()
        if include_optional:
            return ListFunctionsResponse(
                functions = [
                    unitycatalog.models.function_info.FunctionInfo(
                        name = '', 
                        catalog_name = '', 
                        schema_name = '', 
                        input_params = unitycatalog.models.function_parameter_infos.FunctionParameterInfos(
                            parameters = [
                                unitycatalog.models.function_parameter_info.FunctionParameterInfo(
                                    name = '', 
                                    type_text = '', 
                                    type_json = '', 
                                    type_name = 'BOOLEAN', 
                                    type_precision = 56, 
                                    type_scale = 56, 
                                    type_interval_type = '', 
                                    position = 56, 
                                    parameter_mode = 'IN', 
                                    parameter_type = 'PARAM', 
                                    parameter_default = '', 
                                    comment = '', )
                                ], ), 
                        data_type = 'BOOLEAN', 
                        full_data_type = '', 
                        return_params = unitycatalog.models.function_parameter_infos.FunctionParameterInfos(), 
                        routine_body = 'SQL', 
                        routine_definition = '', 
                        routine_dependencies = unitycatalog.models.dependency_list.DependencyList(
                            dependencies = [
                                unitycatalog.models.dependency.Dependency(
                                    table = unitycatalog.models.table_dependency.TableDependency(
                                        table_full_name = '', ), 
                                    function = unitycatalog.models.function_dependency.FunctionDependency(
                                        function_full_name = '', ), )
                                ], ), 
                        parameter_style = 'S', 
                        is_deterministic = True, 
                        sql_data_access = 'CONTAINS_SQL', 
                        is_null_call = True, 
                        security_type = 'DEFINER', 
                        specific_name = '', 
                        comment = '', 
                        properties = '', 
                        full_name = '', 
                        created_at = 56, 
                        updated_at = 56, 
                        function_id = '', 
                        external_language = '', )
                    ],
                next_page_token = ''
            )
        else:
            return ListFunctionsResponse(
        )
        """

    def testListFunctionsResponse(self):
        """Test ListFunctionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
